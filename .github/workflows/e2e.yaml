name: E2E Tests

on:
  issue_comment:
    types: [created]

jobs:
  check-comment:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/test e2e') }}
    outputs:
      should-run: ${{ steps.check-permissions.outputs.result }}
      ref: ${{ steps.get-ref.outputs.ref }}
    steps:
      - name: Check if commenter has permissions
        id: check-permissions
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const commenter = context.payload.comment.user.login;

            // Check if commenter is the PR author
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: issue_number
            });
            const isPRAuthor = commenter === pr.user.login;

            // Check if commenter is a repository maintainer
            const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner,
              repo,
              username: commenter
            });
            const isMaintainer = ['admin', 'maintain', 'write'].includes(permission.permission);

            return (isPRAuthor || isMaintainer) ? 'true' : 'false';

      - name: Get PR branch reference
        id: get-ref
        if: steps.check-permissions.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: issue_number
            });

            return pr.head.ref;

      - name: Add reaction to comment
        if: steps.check-permissions.outputs.result == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });

      - name: Notify if permission denied
        if: steps.check-permissions.outputs.result != 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number,
              body: '⚠️ Only PR authors and repository maintainers can trigger E2E tests.'
            });
            github.rest.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: '-1'
            });

  e2e-test:
    needs: check-comment
    if: ${{ needs.check-comment.outputs.should-run == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.check-comment.outputs.ref }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
          cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Swagger
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate Swagger docs
        run: make swagger

      - name: Generate E2E client
        run: make e2e-client

      - name: Run E2E tests
        run: make e2e-test

      - name: Notify completion
        uses: actions/github-script@v6
        if: ${{ always() }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const status = '${{ job.status }}' === 'success' ? '✅ passed' : '❌ failed';
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number,
              body: `E2E tests ${status}. [View Run](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`
            });
